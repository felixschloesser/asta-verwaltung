# Generated by Django 3.1.3 on 2021-01-03 22:24

import datetime
from django.conf import settings
import django.contrib.postgres.constraints
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.db.models.manager
import django.utils.timezone
import hashid_field.field
import keys.models
import keys.validators
import phonenumber_field.modelfields
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=8, unique=True, verbose_name='Gebäude')),
                ('name', models.CharField(blank=True, max_length=32, null=True, unique=True, verbose_name='Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aktualisierungszeitpunkt')),
            ],
            options={
                'verbose_name': 'Gebäude',
                'verbose_name_plural': 'Gebäude',
                'ordering': ['identifier'],
            },
        ),
        migrations.CreateModel(
            name='Deposit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=50, max_digits=5, verbose_name='Kautionsbetrag')),
                ('currency', models.CharField(choices=[('EUR', '€')], default='EUR', max_length=3, verbose_name='Währung')),
                ('in_datetime', models.DateTimeField(default=datetime.datetime.now, validators=[keys.validators.present_or_max_3_days_ago], verbose_name='Einzahlungszeitpunkt')),
                ('in_method', models.CharField(choices=[('cash', 'Bar'), ('bank transfer', 'Überweisung')], default='cash', max_length=64, verbose_name='Zahlungsmittel')),
                ('out_datetime', models.DateTimeField(null=True, validators=[keys.validators.present_or_max_3_days_ago], verbose_name='Rückzahlungszeitpunkt')),
                ('out_method', models.CharField(choices=[('cash', 'Bar'), ('bank transfer', 'Überweisung')], default='cash', max_length=64, null=True, verbose_name='Zahlungsmittel')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aktualisierungszeitpunkt')),
            ],
            options={
                'verbose_name': 'Kaution',
                'verbose_name_plural': 'Kautionen',
                'ordering': ['in_datetime', 'amount'],
            },
        ),
        migrations.CreateModel(
            name='Door',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True, verbose_name='Aktiv')),
                ('kind', models.CharField(choices=[('access', 'Zugangstüre'), ('connecting', 'Verbindungstür')], default=('access', 'Zugangstüre'), max_length=32, verbose_name='Typ')),
                ('comment', models.CharField(blank=True, max_length=64, null=True, verbose_name='Kommentar')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aktualisierungszeitpunkt')),
            ],
            options={
                'verbose_name': 'Tür',
                'verbose_name_plural': 'Türen',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aktualisierungszeitpunkt')),
            ],
            options={
                'verbose_name': 'Gruppe',
                'verbose_name_plural': 'Gruppen',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalBuilding',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('identifier', models.CharField(db_index=True, max_length=8, verbose_name='Gebäude')),
                ('name', models.CharField(blank=True, db_index=True, max_length=32, null=True, verbose_name='Name')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Aktualisierungszeitpunkt')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Gebäude',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDeposit',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=50, max_digits=5, verbose_name='Kautionsbetrag')),
                ('currency', models.CharField(choices=[('EUR', '€')], default='EUR', max_length=3, verbose_name='Währung')),
                ('in_datetime', models.DateTimeField(default=datetime.datetime.now, validators=[keys.validators.present_or_max_3_days_ago], verbose_name='Einzahlungszeitpunkt')),
                ('in_method', models.CharField(choices=[('cash', 'Bar'), ('bank transfer', 'Überweisung')], default='cash', max_length=64, verbose_name='Zahlungsmittel')),
                ('out_datetime', models.DateTimeField(null=True, validators=[keys.validators.present_or_max_3_days_ago], verbose_name='Rückzahlungszeitpunkt')),
                ('out_method', models.CharField(choices=[('cash', 'Bar'), ('bank transfer', 'Überweisung')], default='cash', max_length=64, null=True, verbose_name='Zahlungsmittel')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Aktualisierungszeitpunkt')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Kaution',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDoor',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('active', models.BooleanField(default=True, verbose_name='Aktiv')),
                ('kind', models.CharField(choices=[('access', 'Zugangstüre'), ('connecting', 'Verbindungstür')], default=('access', 'Zugangstüre'), max_length=32, verbose_name='Typ')),
                ('comment', models.CharField(blank=True, max_length=64, null=True, verbose_name='Kommentar')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Aktualisierungszeitpunkt')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Tür',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalGroup',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=64, verbose_name='Name')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Aktualisierungszeitpunkt')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Gruppe',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalIssue',
            fields=[
                ('active', models.BooleanField(default=False, verbose_name='aktiv')),
                ('out_date', models.DateField(default=django.utils.timezone.now, validators=[keys.validators.present_or_max_10_days_ago], verbose_name='Ausgabedatum')),
                ('in_date', models.DateField(blank=True, null=True, validators=[keys.validators.present_or_max_10_days_ago], verbose_name='Rückgabedatum')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Aktualisierungszeitpunkt')),
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Ausleihe',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalKey',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('number', models.CharField(max_length=32, verbose_name='Schlüsselnummer')),
                ('stolen_or_lost', models.BooleanField(default=False, verbose_name='gestohlen oder verloren')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Aktualisierungszeitpunkt')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Schlüssel',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLockingSystem',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=32)),
                ('method', models.CharField(choices=[('mechanical', 'mechanisch'), ('mechatronical', 'mechatronisch'), ('transponder', 'Transponder')], default=('mechanical', 'mechanisch'), max_length=32, verbose_name='Schließverfahren')),
                ('company', models.CharField(blank=True, db_index=True, max_length=32, null=True, verbose_name='Firma')),
                ('comment', models.CharField(blank=True, max_length=64, null=True, verbose_name='Kommentar')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Aktualisierungszeitpunkt')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Schließsystem',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPerson',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('first_name', models.CharField(max_length=64, verbose_name='Vorname')),
                ('last_name', models.CharField(max_length=64, verbose_name='Nachname')),
                ('university_email', models.EmailField(db_index=True, max_length=254, validators=[keys.validators.validate_university_mail], verbose_name='Uni-Mail')),
                ('private_email', models.EmailField(db_index=True, max_length=254, verbose_name='Private Mail')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(db_index=True, max_length=128, region=None, verbose_name='Telefon')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Aktualisierungszeitpunkt')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Person',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPurpose',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Zweck')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Aktualisierungszeitpunkt')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Zweck',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRoom',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('number', models.CharField(max_length=32, verbose_name='Raumnummer')),
                ('name', models.CharField(blank=True, db_index=True, max_length=32, null=True, verbose_name='Raumname')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Aktualisierungszeitpunkt')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Raum',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalStorageLocation',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Name')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Aktualisierungszeitpunkt')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Aufbewahrungsort',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('active', models.BooleanField(default=False, verbose_name='aktiv')),
                ('out_date', models.DateField(default=django.utils.timezone.now, validators=[keys.validators.present_or_max_10_days_ago], verbose_name='Ausgabedatum')),
                ('in_date', models.DateField(blank=True, null=True, validators=[keys.validators.present_or_max_10_days_ago], verbose_name='Rückgabedatum')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aktualisierungszeitpunkt')),
                ('id', hashid_field.field.HashidAutoField(alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', min_length=7, primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'Ausleihe',
                'verbose_name_plural': 'Ausleihen',
                'ordering': ['-out_date'],
            },
            managers=[
                ('all_issues', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Key',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=32, verbose_name='Schlüsselnummer')),
                ('stolen_or_lost', models.BooleanField(default=False, verbose_name='gestohlen oder verloren')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aktualisierungszeitpunkt')),
            ],
            options={
                'verbose_name': 'Schlüssel',
                'verbose_name_plural': 'Schlüssel',
                'ordering': ['locking_system', 'number'],
            },
            managers=[
                ('all_keys', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='LockingSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('method', models.CharField(choices=[('mechanical', 'mechanisch'), ('mechatronical', 'mechatronisch'), ('transponder', 'Transponder')], default=('mechanical', 'mechanisch'), max_length=32, verbose_name='Schließverfahren')),
                ('company', models.CharField(blank=True, max_length=32, null=True, unique=True, verbose_name='Firma')),
                ('comment', models.CharField(blank=True, max_length=64, null=True, verbose_name='Kommentar')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aktualisierungszeitpunkt')),
            ],
            options={
                'verbose_name': 'Schließsystem',
                'verbose_name_plural': 'Schließsysteme',
            },
        ),
        migrations.CreateModel(
            name='Purpose',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Zweck')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aktualisierungszeitpunkt')),
            ],
            options={
                'verbose_name': 'Zweck',
                'verbose_name_plural': 'Zwecke',
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=32, verbose_name='Raumnummer')),
                ('name', models.CharField(blank=True, max_length=32, null=True, unique=True, verbose_name='Raumname')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aktualisierungszeitpunkt')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='keys.building', verbose_name='Gebäude')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='rooms', to='keys.group', verbose_name='Gruppe')),
                ('purpose', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='rooms', to='keys.purpose', verbose_name='Zweck')),
            ],
            options={
                'verbose_name': 'Raum',
                'verbose_name_plural': 'Räume',
            },
        ),
        migrations.CreateModel(
            name='StorageLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aktualisierungszeitpunkt')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='storage_locations', to='keys.room', verbose_name='Ort')),
            ],
            options={
                'verbose_name': 'Aufbewahrungsort',
                'verbose_name_plural': 'Aufbewahrungsorte',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', hashid_field.field.HashidAutoField(alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890', min_length=7, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=64, verbose_name='Vorname')),
                ('last_name', models.CharField(max_length=64, verbose_name='Nachname')),
                ('university_email', models.EmailField(max_length=254, unique=True, validators=[keys.validators.validate_university_mail], verbose_name='Uni-Mail')),
                ('private_email', models.EmailField(max_length=254, unique=True, verbose_name='Private Mail')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True, verbose_name='Telefon')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellungszeitpunkt')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Aktualisierungszeitpunkt')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='people', to='keys.group', verbose_name='Gruppe')),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'Personen',
                'ordering': ['last_name', 'first_name', 'created_at'],
            },
            managers=[
                ('all_people', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='lockingsystem',
            constraint=models.UniqueConstraint(fields=('name', 'company'), name='locking_system_is_unique'),
        ),
        migrations.AddField(
            model_name='key',
            name='doors',
            field=models.ManyToManyField(related_name='keys', to='keys.Door', verbose_name='Türen'),
        ),
        migrations.AddField(
            model_name='key',
            name='locking_system',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='keys', to='keys.lockingsystem', verbose_name='Schließsystem'),
        ),
        migrations.AddField(
            model_name='key',
            name='storage_location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='keys', to='keys.storagelocation', verbose_name='Aufbewahrungsort'),
        ),
        migrations.AddField(
            model_name='issue',
            name='key',
            field=models.ForeignKey(limit_choices_to=models.Q(('issues__active', False), ('stolen_or_lost', False)), on_delete=django.db.models.deletion.PROTECT, related_name='issues', to='keys.key', verbose_name='Schlüssel'),
        ),
        migrations.AddField(
            model_name='issue',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='issues', to='keys.person', verbose_name='Ausgaben'),
        ),
        migrations.AddField(
            model_name='historicalstoragelocation',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalstoragelocation',
            name='location',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='keys.room', verbose_name='Ort'),
        ),
        migrations.AddField(
            model_name='historicalroom',
            name='building',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='keys.building', verbose_name='Gebäude'),
        ),
        migrations.AddField(
            model_name='historicalroom',
            name='group',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='keys.group', verbose_name='Gruppe'),
        ),
        migrations.AddField(
            model_name='historicalroom',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalroom',
            name='purpose',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='keys.purpose', verbose_name='Zweck'),
        ),
        migrations.AddField(
            model_name='historicalpurpose',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='group',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='keys.group', verbose_name='Gruppe'),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicallockingsystem',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalkey',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalkey',
            name='locking_system',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='keys.lockingsystem', verbose_name='Schließsystem'),
        ),
        migrations.AddField(
            model_name='historicalkey',
            name='storage_location',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='keys.storagelocation', verbose_name='Aufbewahrungsort'),
        ),
        migrations.AddField(
            model_name='historicalissue',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalissue',
            name='key',
            field=models.ForeignKey(blank=True, db_constraint=False, limit_choices_to=models.Q(('issues__active', False), ('stolen_or_lost', False)), null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='keys.key', verbose_name='Schlüssel'),
        ),
        migrations.AddField(
            model_name='historicalissue',
            name='person',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='keys.person', verbose_name='Ausgaben'),
        ),
        migrations.AddField(
            model_name='historicalgroup',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaldoor',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaldoor',
            name='locking_system',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='keys.lockingsystem', verbose_name='Schließsystem'),
        ),
        migrations.AddField(
            model_name='historicaldoor',
            name='room',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='keys.room', verbose_name='führt in Raum'),
        ),
        migrations.AddField(
            model_name='historicaldeposit',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaldeposit',
            name='person',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='keys.person', verbose_name='Person'),
        ),
        migrations.AddField(
            model_name='historicalbuilding',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='door',
            name='locking_system',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doors', to='keys.lockingsystem', verbose_name='Schließsystem'),
        ),
        migrations.AddField(
            model_name='door',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='doors', to='keys.room', verbose_name='führt in Raum'),
        ),
        migrations.AddField(
            model_name='deposit',
            name='person',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='keys.person', verbose_name='Person'),
        ),
        migrations.AddConstraint(
            model_name='room',
            constraint=models.UniqueConstraint(fields=('building', 'number'), name='room_is_unique'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['last_name', 'first_name'], name='keys_person_last_na_101fc1_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['first_name'], name='first_name_idx'),
        ),
        migrations.AddIndex(
            model_name='key',
            index=models.Index(fields=['number'], name='key_number_idx'),
        ),
        migrations.AddConstraint(
            model_name='key',
            constraint=models.UniqueConstraint(fields=('number', 'locking_system'), name='key_number_in_locking_system_are_unique'),
        ),
        migrations.AddConstraint(
            model_name='issue',
            constraint=models.UniqueConstraint(condition=models.Q(active=True), fields=('key',), name='key_not_yet_returned'),
        ),
        migrations.AddConstraint(
            model_name='issue',
            constraint=models.CheckConstraint(check=models.Q(('active', True), ('in_date__isnull', True)), name='active_dont_have_in_date'),
        ),
        migrations.AddConstraint(
            model_name='issue',
            constraint=models.CheckConstraint(check=models.Q(('active', False), ('in_date__isnull', False)), name='inactive_has_in_date'),
        ),
        migrations.AddConstraint(
            model_name='issue',
            constraint=models.CheckConstraint(check=models.Q(in_date__gte=django.db.models.expressions.F('out_date')), name='give_out_before_take_in'),
        ),
        migrations.AddConstraint(
            model_name='issue',
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(expressions=((keys.models.TsTzRange('out_date', 'in_date', django.contrib.postgres.fields.ranges.RangeBoundary()), '&&'), ('key', '=')), name='exclude_overlapping_issues'),
        ),
    ]
